export declare let firstRun: boolean;
export declare let contentPath: string;
export declare let transparency: boolean;
export declare function addStyle(styleString: string): void;
export declare function addScript(scriptString: string): void;
export declare function sleep(ms: number): Promise<void>;
export declare function checkIfConfigIsBroken(): Promise<void>;
export declare function setup(): void;
export declare const packageVersion: any;
export declare function getVersion(): string;
export declare function getDisplayVersion(): string;
export declare function injectJS(inject: string): Promise<void>;
export declare function injectElectronFlags(): Promise<void>;
export declare function setLang(language: string): Promise<void>;
export declare function getLang(object: string): Promise<string>;
export declare function getLangName(): Promise<string>;
export interface WindowState {
    width: number;
    height: number;
    x: number;
    y: number;
    isMaximized: boolean;
}
export declare function setWindowState(object: WindowState): Promise<void>;
export declare function getWindowState<K extends keyof WindowState>(object: K): Promise<WindowState[K]>;
export declare function checkForDataFolder(): void;
export interface Settings {
    '0'?: string;
    noBundleUpdates?: boolean;
    ignoreProtocolWarning?: boolean;
    customIcon: string;
    windowStyle: string;
    channel: string;
    armcordCSP: boolean;
    minimizeToTray: boolean;
    automaticPatches: boolean;
    alternativePaste: boolean;
    multiInstance: boolean;
    spellcheck: boolean;
    mods: string;
    dynamicIcon: boolean;
    mobileMode: boolean;
    skipSplash: boolean;
    performanceMode: string;
    customJsBundle: RequestInfo | URL;
    customCssBundle: RequestInfo | URL;
    startMinimized: boolean;
    useLegacyCapturer: boolean;
    tray: boolean;
    keybinds: Array<string>;
    inviteWebsocket: boolean;
    disableAutogain: boolean;
    trayIcon: string;
    doneSetup: boolean;
    clientName: string;
}
export declare function getConfigLocation(): string;
export declare function getConfig<K extends keyof Settings>(object: K): Settings[K];
export declare function setConfig<K extends keyof Settings>(object: K, toSet: Settings[K]): Promise<void>;
export declare function setConfigBulk(object: Settings): Promise<void>;
export declare function checkIfConfigExists(): Promise<void>;
export declare let modInstallState: string;
export declare function installModLoader(): Promise<void>;
export declare function registerGlobalKeybinds(): Promise<void>;
//# sourceMappingURL=utils.d.ts.map
